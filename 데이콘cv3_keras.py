# -*- coding: utf-8 -*-
"""데이콘CV3_keras

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lYJXVw02DhnJg1At1hvYR1CvF8t49FQA

keras cnn 모델 사용
"""

import time
import random
import datetime
from collections import defaultdict

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from keras.utils.np_utils import to_categorical
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import LearningRateScheduler

from google.colab import drive
drive.mount('/content/drive')

train = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/데이콘1/train.csv')
test = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/데이콘1/test.csv')
sub = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/데이콘1/submission.csv')

"""letter 속에 digit 가 숨어있는 이미지

우리는 숫자를 예측해야한다.
"""

# 이미지 확인
import random

idx = random.randint(0, 2048)
img = train.loc[idx, '0':].values.reshape(28, 28).astype(int)
digit = train.loc[idx, 'digit']
letter = train.loc[idx, 'letter']

plt.title('Index: %i, Digit: %s, Letter: %s'%(idx, digit, letter)) 
plt.imshow(img)                                                    
plt.show()

X_train = (train[[str(i) for i in range(784)]] / 255.).values.reshape(-1, 28, 28, 1)
y_train = to_categorical(train['digit'].values)

# 성능을 높이는데, 이미지 데이터 증강이 중요해보였음

datagen = ImageDataGenerator(
        rotation_range=40,  
        zoom_range = 0.2,
        shear_range = 0.2,  
        width_shift_range=0.2, 
        height_shift_range=0.2)

#이미지 노이즈나 밝기에 대한 조정도 필요할 것 같음

# cnn 모델 구축
# 이미지데이터 딥러닝 학습에서 가장 많이 사용되는 reLu 함수 사용

model = Sequential()
model.add(Conv2D(32, kernel_size = 3, activation='relu', input_shape = (28, 28, 1)))
model.add(Conv2D(32, kernel_size = 3, activation='relu'))
model.add(Conv2D(32, kernel_size = 5, strides=2, padding='same', activation='relu'))
model.add(Dropout(0.4))

model.add(Conv2D(64, kernel_size = 3, activation='relu'))
model.add(Conv2D(64, kernel_size = 3, activation='relu'))
model.add(Conv2D(64, kernel_size = 5, strides=2, padding='same', activation='relu'))
model.add(Dropout(0.4))

model.add(Conv2D(128, kernel_size = 4, activation='relu'))
model.add(Flatten())
model.add(Dropout(0.4))
model.add(Dense(10, activation='softmax'))

model.compile(optimizer="adam", loss="categorical_crossentropy", metrics=["accuracy"])

model.summary()

# learning rate 조절
lr = LearningRateScheduler(lambda x: 1e-3 * 0.95 ** x)

epochs = 45
# Train-Test를 9:1로 분리
X_train2, X_val2, y_train2, y_val2 = train_test_split(
    X_train, y_train, test_size = 0.1)

history = model.fit(
    datagen.flow(X_train2, y_train2, batch_size=32),
    epochs=epochs, 
    steps_per_epoch=X_train2.shape[0]//32,
    validation_data=(X_val2, y_val2), 
    callbacks=[lr], 
    verbose=0
)

# Parameter 및 모델 구조 저장
model.save_weights(f'params.h5')
    
model_json = model.to_json()
with open(f"model.json", "w") as json_file : 
    json_file.write(model_json)

# 예측
X_test = (test[[str(i) for i in range(784)]] / 255.).values.reshape(-1, 28, 28, 1)
pred = np.argmax(model.predict(X_test), axis=1)

sub.digit = pred
sub.to_csv('third.csv', index=False) 
#0.7794117647
#0.7707634642